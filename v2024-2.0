import requests
from bs4 import BeautifulSoup
from rich.console import Console
from rich.prompt import Prompt
import sys
import msvcrt

console = Console()

def print_banner():
    banner_text = """
[bold #0c7ec9] ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë
[bold #bf06bf]‚ñà‚ñà‚ïë‚ñÑ‚ñÑ ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïê‚ñÄ‚ñÄ‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù
[/]
[bold #c21143]Developer Instagram: @_mohmdawais[/bold #c21143]
[bold cyan]Developer GitHub: github.com/mohmdawais[/bold cyan]
    """
    console.print(banner_text)

print_banner()

def get_login_payload(soup, username, password):
    return {
        'ctl00$ContentPlaceHolder2$ddlcampus': 'Islamabad',
        'ctl00$ContentPlaceHolder2$ddlUserType': 'Student/Alumni',
        'ctl00$ContentPlaceHolder2$txt_regid': username,
        'ctl00$ContentPlaceHolder2$txt_password': password,
        'ctl00$ContentPlaceHolder2$btnAccountlogin': 'Login',
        '__VIEWSTATE': soup.find('input', {'name': '__VIEWSTATE'})['value'],
        '__EVENTVALIDATION': soup.find('input', {'name': '__EVENTVALIDATION'})['value'],
        '__VIEWSTATEGENERATOR': soup.find('input', {'name': '__VIEWSTATEGENERATOR'})['value']
    }

def update_hidden_fields(soup):
    return {
        '__VIEWSTATE': soup.find('input', {'name': '__VIEWSTATE'})['value'],
        '__EVENTVALIDATION': soup.find('input', {'name': '__EVENTVALIDATION'})['value'],
        '__VIEWSTATEGENERATOR': soup.find('input', {'name': '__VIEWSTATEGENERATOR'})['value']
    }

def get_subjects(soup, dropdown_name):
    subjects_dropdown = soup.find('select', {'name': dropdown_name})
    return subjects_dropdown.find_all('option')[1:] if subjects_dropdown else []

def get_form_fields(soup, prefix):
    fields = {tag['name']: 'A' for tag in soup.find_all('input', {'name': True}) if tag['name'].startswith(prefix)}
    return fields

def fill_form(session, url, form_name, dropdown_name, prefix, comments=None):
    response = session.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    subjects = get_subjects(soup, dropdown_name)
    
    if not subjects:
        console.print(f"[ üåü ] {form_name} already filled", style="bold yellow")
        return
    
    hidden_fields = update_hidden_fields(soup)
    for subject in subjects:
        payload = {
            '__EVENTTARGET': dropdown_name,
            '__VIEWSTATE': hidden_fields['__VIEWSTATE'],
            '__VIEWSTATEGENERATOR': hidden_fields['__VIEWSTATEGENERATOR'],
            '__EVENTVALIDATION': hidden_fields['__EVENTVALIDATION'],
            dropdown_name: subject['value']
        }
        response = session.post(url, data=payload)
        soup = BeautifulSoup(response.content, 'html.parser')
        hidden_fields = update_hidden_fields(soup)
        form_payload = {
            '__VIEWSTATE': hidden_fields['__VIEWSTATE'],
            '__VIEWSTATEGENERATOR': hidden_fields['__VIEWSTATEGENERATOR'],
            '__EVENTVALIDATION': hidden_fields['__EVENTVALIDATION'],
            'btnSave': 'Submit Proforma'
        }
        form_payload.update(get_form_fields(soup, prefix))
        if comments:
            form_payload.update(comments)
        session.post(url, data=form_payload)
        console.print(f"      [-] Submitted form for {subject.text}", style="bold #8a8a8a")
    console.print(f"[ ‚úÖ ] {form_name}filled Successfully.", style="bold green")

def get_password(prompt="Password: "):
    """Prompt for password with masking."""
    password = ""
    console.print(prompt, end="", style="bold yellow")
    sys.stdout.flush()
    while True:
        ch = msvcrt.getch()
        if ch in {b'\r', b'\n'}:
            print('')
            break
        elif ch == b'\x08':  # Handle backspace
            if len(password) > 0:
                password = password[:-1]
                sys.stdout.write('\b \b')
                sys.stdout.flush()
        else:
            password += ch.decode('utf-8')
            sys.stdout.write('*')
            sys.stdout.flush()
    return password

def main():
    session = requests.Session()
    login_url = "https://portals.au.edu.pk/qec/login.aspx"
    base_url = "https://portals.au.edu.pk/qec/"
    urls = {
        "Course Evaluation Form": {"url": f"{base_url}p1.aspx", "dropdown_name": 'ctl00$ContentPlaceHolder2$cmb_courses', "prefix": 'ctl00$ContentPlaceHolder2$q'},
        "Teacher Evaluation Form": {"url": f"{base_url}p10.aspx", "dropdown_name": 'ctl00$ContentPlaceHolder2$ddlTeacher', "prefix": 'ctl00$ContentPlaceHolder2$q', "comments": {
            'ctl00$ContentPlaceHolder2$q20': 'Good instructor', 
            'ctl00$ContentPlaceHolder2$q21': 'Good course'
        }},
        "Online Learning Feedback Form": {"url": f"{base_url}p10a_learning_online_form.aspx", "dropdown_name": 'ctl00$ContentPlaceHolder1$cmb_courses', "prefix": 'ctl00$ContentPlaceHolder1$q', "comments": {
            'ctl00$ContentPlaceHolder1$q20': 'Good online learning experience'
        }}
    }

    login_success = False
    while not login_success:
        username = Prompt.ask("[bold #f5c816]Enter your ID[/bold #f5c816]")
        password = get_password("[bold #f5c816]Enter your password: [/bold #f5c816]")
        response = session.get(login_url)
        soup = BeautifulSoup(response.content, 'html.parser')
        login_response = session.post(login_url, data=get_login_payload(soup, username, password))

        if "logout" in login_response.text.lower():
            console.print("\n[ ‚úÖ ] Login successful", style="bold green")
            login_success = True
        else:
            console.print("\n[ ‚ùå ] Login failed. Please try again.\n", style="bold red")

    for form_name, form_data in urls.items():
        fill_form(session, form_data['url'], form_name, form_data['dropdown_name'], form_data['prefix'], form_data.get('comments'))

    input("\nPress Enter to close the program...")

if __name__ == "__main__":
    main()
